directive sample 1000.

(* directive plot C6(); C8(); C10(); C12(); C14(); C16() *)

val store_rate_12= 0.0003000656
val store_rate_14 = 0.0400323889
val store_rate_16 = 0.8235217126
val store_rate_18 = 0.9888339514
val store_rate_20 = 0.7785977860
val mal_rate = 0.006
val acyl_rate = 0.001

new form6@1.0: chan
new form8@1.0: chan
new form10@1.0: chan
new form12@1.0: chan
new form14@0.9996999344: chan
new form16@0.95996761: chan
new form18@0.17647829: chan
new form20@0.01116605: chan
new form22@0.22140221: chan

(* 
Acetyl-CoA can either become Malonyl-CoA or Acyl-CoA
From then on each intermediate product has a choice to 
either go on and form a longer product(form channels) 
or get stored. The final products are not involved in any
further interaction and are modelled as empty processes 
just to keep track of their numbers.
*)

let Acetyl_CoA() = 
(
	do delay@mal_rate; Malonyl_CoA()
	or delay@acyl_rate; Acyl_CoA()
)
and Malonyl_CoA() = 
(
	do !form6; ()
	or !form8; ()
	or !form10; ()
	or !form12; ()
	or !form14; ()
	or !form16; ()
)
and Acyl_CoA() = ?form6; Acyl_CoA_6()
and Acyl_CoA_6() = ?form8; Acyl_CoA_8()
and Acyl_CoA_8() = ?form10; Acyl_CoA_10()
and Acyl_CoA_10() = ?form12; Acyl_CoA_12()
and Acyl_CoA_12() = 
(
	do ?form14; Acyl_CoA_14()
	or delay@store_rate_12; C12()
)
and Acyl_CoA_14() = 
(
	do ?form16; Acyl_CoA_16()
	or delay@store_rate_14; C14()
)
and Acyl_CoA_16() = 
(
	do ?form18; Acyl_CoA_18()
	or delay@store_rate_16; C16()
)
and Acyl_CoA_18() = 
(
	do ?form20; Acyl_CoA_20()
	or delay@store_rate_18; C18()
)
and Acyl_CoA_20() = 
(
	do ?form22; Acyl_CoA_22()
	or delay@store_rate_20; C20()
)
and Acyl_CoA_22() = delay@0.0001; C22()
and C12() = ()
and C14() = ()
and C16() = ()
and C18() = ()
and C20() = ()
and C22() = ()

run(200 of Acetyl_CoA())







